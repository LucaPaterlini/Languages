<!doctype html>
<html lang="en-us">
<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="description" content="Sending HTTP response in Echo | Echo is a high performance, extensible, minimalist web framework for Go (Golang).">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:site" content="@echo">
  <meta name="twitter:creator" content="@labstack">
  <meta name="twitter:title" content="Response | Echo - High performance, minimalist Go web framework">
  <meta name="twitter:description" content="Sending HTTP response in Echo | Echo is a high performance, extensible, minimalist web framework for Go (Golang).">
  <meta name="twitter:image" content="https://echo.labstack.com/images/share.png">
  <meta property="og:type" content="website">
  <meta property="og:site_name" content="Response">
  <meta property="og:title" content="Response | Echo - High performance, minimalist Go web framework">
  <meta property="og:description" content="Sending HTTP response in Echo | Echo is a high performance, extensible, minimalist web framework for Go (Golang).">
  <meta property="og:url" content="https://echo.labstack.com">
  <meta property="og:image" content="https://echo.labstack.com/images/share.png">
  <title>
    Response | Echo - High performance, minimalist Go web framework
  </title>
  <link rel="stylesheet"  
    href="https://unpkg.com/font-awesome@4.6.3/css/font-awesome.min.css">
  <link rel="stylesheet"
    href="https://cdn.labstack.com/css/icomoon.css">
  <link rel="stylesheet" 
    href="https://unpkg.com/docsearch.js@2.2.1/dist/cdn/docsearch.min.css">
  <link rel="stylesheet" href="../css/bsa.css">
  <link rel="stylesheet" href="https://cdn.labstack.com/css/w3.css">
  <link rel="stylesheet" href="https://cdn.labstack.com/css/prism.css">
  <link rel="stylesheet" href="https://cdn.labstack.com/css/base.css">
  <link rel="icon"
    type="image/png"
    href="https://cdn.labstack.com/images/labstack-icon.png">
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-85059636-2', 'auto');
    ga('send', 'pageview');
  </script>
</head>

<body class="docs">
	<div class="topnav">
  <nav class="w3-content">
    <a href="../index.html"><img class="logo" src="https://cdn.labstack.com/images/echo-logo.svg" alt="Echo"></a>
    <span class="hide-small">
      <i class="fa fa-search w3-text-gray"></i>
      <input id="search-box" type="text" class="w3-input">
    </span>
    <span class="menu hide-small hide-medium">
      
      
        <a class="active" href="../guide">Guide</a>
      
        <a href="../middleware">Middleware</a>
      
        <a href="../cookbook">Cookbook</a>
      
      <a href="https://forum.labstack.com">Forum</a>
    </span>
    <button class="hamburger hide-large" onclick="toggleSidenav()">
      <span></span>
    </button>
  </nav>
</div>

  <div class="w3-content">
    <nav class="sidenav">
  <div class="w3-container">
    <button class="w3-button w3-theme w3-round-large" onclick="location.href='/support-echo';">
      <i class="fa fa-heart" aria-hidden="true"></i> Support Echo
    </button>
    
    <div class="menu">
      
        <a class="active" href="../guide">
          Guide
        </a>
      
        <a href="../middleware">
          Middleware
        </a>
      
        <a href="../cookbook">
          Cookbook
        </a>
      
    </div>
    <div class="sub-menu">
      
        
          <h3><i class='fa fa-book'></i> Guide</h3>
          
            <a href="installation">
              Installation
            </a>
          
            <a href="customization/index.html">
              Customization
            </a>
          
            <a href="context">
              Context
            </a>
          
            <a href="cookies">
              Cookies
            </a>
          
            <a href="error-handling">
              Error Handling
            </a>
          
            <a href="faq">
              FAQ
            </a>
          
            <a href="migration">
              Migration
            </a>
          
            <a href="request/index.html">
              Request
            </a>
          
            <a class="active" href="response">
              Response
            </a>
          
            <a href="routing">
              Routing
            </a>
          
            <a href="static-files">
              Static Files
            </a>
          
            <a href="templates">
              Templates
            </a>
          
            <a href="testing">
              Testing
            </a>
          
        
      
    </div>
  </div>
</nav>

    <div class="main">
      

      <div class="ad">
  <script async type="text/javascript" src="https://cdn.carbonads.com/carbon.js?zoneid=1673&amp;serve=C6AILKT&amp;placement=echolabstackcom" id="_carbonads_js"></script>
</div>


      <div class="w3-row-padding">
        <div class="w3-col s12 m10 l10">
          <div class="w3-panel w3-pale-green w3-leftbar w3-border-green">
  <p>
    Check out <a href="../middleware/cube">cube middleware</a> for HTTP analytics. Measure server latency, data transfer, discover top endpoints, server errors and much more.
  </p>
</div>

          <article class="content">
            <section>
              <h1>Response</h1>
              

<h2 id="send-string">Send String</h2>

<p><code>Context#String(code int, s string)</code> can be used to send plain text response with status
code.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  return c.String(http.StatusOK, &quot;Hello, World!&quot;)
}
</code></pre>

<h2 id="send-html-reference-to-templates">Send HTML (Reference to templates)</h2>

<p><code>Context#HTML(code int, html string)</code> can be used to send simple HTML response with
status code. If you are looking to send dynamically generate HTML see <a href="templates">templates</a>.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  return c.HTML(http.StatusOK, &quot;&lt;strong&gt;Hello, World!&lt;/strong&gt;&quot;)
}
</code></pre>

<h3 id="send-html-blob">Send HTML Blob</h3>

<p><code>Context#HTMLBlob(code int, b []byte)</code> can be used to send HTML blob with status
code. You may find it handy using with a template engine which outputs <code>[]byte</code>.</p>

<h2 id="render-template">Render Template</h2>

<p><a href="templates">Learn more</a></p>

<h2 id="send-json">Send JSON</h2>

<p><code>Context#JSON(code int, i interface{})</code> can be used to encode a provided Go type into
JSON and send it as response with status code.</p>

<p><em>Example</em></p>

<pre><code class="language-go">// User
type User struct {
  Name  string `json:&quot;name&quot; xml:&quot;name&quot;`
  Email string `json:&quot;email&quot; xml:&quot;email&quot;`
}

// Handler
func(c echo.Context) error {
  u := &amp;User{
    Name:  &quot;Jon&quot;,
    Email: &quot;jon@labstack.com&quot;,
  }
  return c.JSON(http.StatusOK, u)
}
</code></pre>

<h3 id="stream-json">Stream JSON</h3>

<p><code>Context#JSON()</code> internally uses <code>json.Marshal</code> which may not be efficient to large JSON,
in that case you can directly stream JSON.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  u := &amp;User{
    Name:  &quot;Jon&quot;,
    Email: &quot;jon@labstack.com&quot;,
  }
  c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)
  c.Response().WriteHeader(http.StatusOK)
  return json.NewEncoder(c.Response()).Encode(u)
}
</code></pre>

<h3 id="json-pretty">JSON Pretty</h3>

<p><code>Context#JSONPretty(code int, i interface{}, indent string)</code> can be used to a send
a JSON response which is pretty printed based on indent, which could be spaces or tabs.</p>

<p>Example below sends a pretty print JSON indented with spaces:</p>

<pre><code class="language-go">func(c echo.Context) error {
  u := &amp;User{
    Name:  &quot;Jon&quot;,
    Email: &quot;joe@labstack.com&quot;,
  }
  return c.JSONPretty(http.StatusOK, u, &quot;  &quot;)
}
</code></pre>

<pre><code class="language-js">{
  &quot;email&quot;: &quot;joe@labstack.com&quot;,
  &quot;name&quot;: &quot;Jon&quot;
}
</code></pre>

<blockquote>
<p>You can also use <code>Context#JSON()</code> to output a pretty printed JSON (indented with spaces)
by appending <code>pretty</code> in the request URL query string.</p>
</blockquote>

<p><em>Example</em></p>

<pre><code class="language-sh">curl http://localhost:1323/users/1?pretty
</code></pre>

<h3 id="json-blob">JSON Blob</h3>

<p><code>Context#JSONBlob(code int, b []byte)</code> can be used to send pre-encoded JSON blob directly
from external source, for example, database.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  encodedJSON := []byte{} // Encoded JSON from external source
  return c.JSONBlob(http.StatusOK, encodedJSON)
}
</code></pre>

<h2 id="send-jsonp">Send JSONP</h2>

<p><code>Context#JSONP(code int, callback string, i interface{})</code> can be used to encode a provided
Go type into JSON and send it as JSONP payload constructed using a callback, with
status code.</p>

<p><a href="../cookbook/jsonp"><em>Example</em></a></p>

<h2 id="send-xml">Send XML</h2>

<p><code>Context#XML(code int, i interface{})</code> can be used to encode a provided Go type into
XML and send it as response with status cod.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  u := &amp;User{
    Name:  &quot;Jon&quot;,
    Email: &quot;jon@labstack.com&quot;,
  }
  return c.XML(http.StatusOK, u)
}
</code></pre>

<h3 id="stream-xml">Stream XML</h3>

<p><code>Context#XML</code> internally uses <code>xml.Marshal</code> which may not be efficient to large XML,
in that case you can directly stream XML.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  u := &amp;User{
    Name:  &quot;Jon&quot;,
    Email: &quot;jon@labstack.com&quot;,
  }
  c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationXMLCharsetUTF8)
  c.Response().WriteHeader(http.StatusOK)
  return xml.NewEncoder(c.Response()).Encode(u)
}
</code></pre>

<h3 id="xml-pretty">XML Pretty</h3>

<p><code>Context#XMLPretty(code int, i interface{}, indent string)</code> can be used to a send
an XML response which is pretty printed based on indent, which could be spaces or tabs.</p>

<p>Example below sends a pretty print XML indented with spaces:</p>

<pre><code class="language-go">func(c echo.Context) error {
  u := &amp;User{
    Name:  &quot;Jon&quot;,
    Email: &quot;joe@labstack.com&quot;,
  }
  return c.XMLPretty(http.StatusOK, u, &quot;  &quot;)
}
</code></pre>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;User&gt;
  &lt;Name&gt;Jon&lt;/Name&gt;
  &lt;Email&gt;joe@labstack.com&lt;/Email&gt;
&lt;/User&gt;
</code></pre>

<blockquote>
<p>You can also use <code>Context#XML()</code> to output a pretty printed XML (indented with spaces) by appending
<code>pretty</code> in the request URL query string.</p>
</blockquote>

<p><em>Example</em></p>

<pre><code class="language-sh">curl http://localhost:1323/users/1?pretty
</code></pre>

<h3 id="xml-blob">XML Blob</h3>

<p><code>Context#XMLBlob(code int, b []byte)</code> can be used to send pre-encoded XML blob directly
from external source, for example, database.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  encodedXML := []byte{} // Encoded XML from external source
  return c.XMLBlob(http.StatusOK, encodedXML)
}
</code></pre>

<h2 id="send-file">Send File</h2>

<p><code>Context#File(file string)</code> can be used to send the content of file as response.
It automatically sets the correct content type and handles caching gracefully.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  return c.File(&quot;&lt;PATH_TO_YOUR_FILE&gt;&quot;)
}
</code></pre>

<h2 id="send-attachment">Send Attachment</h2>

<p><code>Context#Attachment(file, name string)</code> is similar to <code>File()</code> except that it is
used to send file as attachment with provided name.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  return c.Attachment(&quot;&lt;PATH_TO_YOUR_FILE&gt;&quot;)
}
</code></pre>

<h2 id="send-inline">Send Inline</h2>

<p><code>Context#Inline(file, name string)</code> is similar to <code>File()</code> except that it is
used to send file as inline with provided name.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  return c.Inline(&quot;&lt;PATH_TO_YOUR_FILE&gt;&quot;)
}
</code></pre>

<h2 id="send-blob">Send Blob</h2>

<p><code>Context#Blob(code int, contentType string, b []byte)</code> can be used to send an arbitrary
data response with provided content type and status code.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) (err error) {
  data := []byte(`0306703,0035866,NO_ACTION,06/19/2006
	  0086003,&quot;0005866&quot;,UPDATED,06/19/2006`)
	return c.Blob(http.StatusOK, &quot;text/csv&quot;, data)
}
</code></pre>

<h2 id="send-stream">Send Stream</h2>

<p><code>Context#Stream(code int, contentType string, r io.Reader)</code> can be used to send an
arbitrary data stream response with provided content type, <code>io.Reader</code> and status
code.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  f, err := os.Open(&quot;&lt;PATH_TO_IMAGE&gt;&quot;)
  if err != nil {
    return err
  }
  return c.Stream(http.StatusOK, &quot;image/png&quot;, f)
}
</code></pre>

<h2 id="send-no-content">Send No Content</h2>

<p><code>Context#NoContent(code int)</code> can be used to send empty body with status code.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  return c.NoContent(http.StatusOK)
}
</code></pre>

<h2 id="redirect-request">Redirect Request</h2>

<p><code>Context#Redirect(code int, url string)</code> can be used to redirect the request to
a provided URL with status code.</p>

<p><em>Example</em></p>

<pre><code class="language-go">func(c echo.Context) error {
  return c.Redirect(http.StatusMovedPermanently, &quot;&lt;URL&gt;&quot;)
}
</code></pre>

            </section>
            <footer>
              <div class="w3-panel w3-pale-blue w3-leftbar w3-border-blue">
                <p>
                  <i class="fa fa-pencil" aria-hidden="true"></i>
                  <a href="https://github.com/labstack/echo/blob/master/website/content/guide/response.md">
                    Edit this page on GitHub
                  </a>
                </p>
              </div>
            </footer>
          </article>
        </div>
      </div>
	    <footer class="w3-content w3-container w3-padding-48 w3-center footer">
  <p>
    <strong>Echo</strong> by <a href="https://labstack.com">LabStack</a> © 2017 LabStack
  </p>
  <p>
    <a class="icon" href="https://labstack.com/blog">
      <i class="fa fa-rss" aria-hidden="true"></i>
    </a>
    <a class="icon" href="https://github.com/labstack">
      <i class="fa fa-github" aria-hidden="true"></i>
    </a>
    <a class="icon" href="https://facebook.com/labstack">
      <i class="fa fa-facebook" aria-hidden="true"></i>
    </a>
    <a class="icon" href="https://twitter.com/labstack">
      <i class="fa fa-twitter" aria-hidden="true"></i>
    </a>
    <a class="icon" href="https://plus.google.com/+labstack">
      <i class="fa fa-google-plus" aria-hidden="true"></i>
    </a>
    <a class="icon" href="mailto:hello@labstack.com?Subject=Hello" target="_top">
      <i class="fa fa-envelope" aria-hidden="true"></i>
    </a>
  </p>
</footer>
<script type="text/javascript" src="https://cdn.jsdelivr.net/docsearch.js/2/docsearch.min.js"></script>
<script type="text/javascript">
docsearch({
  apiKey: '69dfc65b57ccba29ec34b68aa5b274ed',
  indexName: 'labstack',
  inputSelector: '#search-box'
});
</script>
<script src="https://cdn.labstack.com/js/prism.js"></script>
<script src="https://cdn.labstack.com/js/base.js"></script>

    </div>
  </div>
</body>
</html>
